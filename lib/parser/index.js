/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,12],$V2=[1,9],$V3=[1,10],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[1,16],$V8=[1,17],$V9=[1,18],$Va=[4,11,12,13,15,16,23,28,29,44,45],$Vb=[23,56,57],$Vc=[28,59,60,61],$Vd=[44,48],$Ve=[28,60,61],$Vf=[21,23],$Vg=[28,36,62],$Vh=[44,51],$Vi=[4,11,12,13,15,16,23,28,29,44,45,58],$Vj=[36,62];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"EOF":4,"rules":5,"mulit_comment":6,"single_comment":7,"charset_stmt":8,"import_stmt":9,"variable_stmt":10,"SC":11,"S_SPACE":12,"MC":13,"MC_END":14,"M_SPACE":15,"CH_START":16,"CHARSET":17,"charset_stmt_repetition0":18,"charset_stmt_group0":19,"charset_stmt_repetition1":20,"CH_SEMICOLON":21,"charset_stmt_repetition2":22,"CH_SPACE":23,"charset_stmt_repetition3":24,"charset_stmt_group1":25,"charset_stmt_repetition4":26,"charset_stmt_repetition5":27,"IM_SPACE":28,"IM_START":29,"IMPORT":30,"import_stmt_repetition0":31,"import_stmt_repetition1":32,"import_stmt_group0":33,"import_stmt_repetition2":34,"import_stmt_repetition3":35,"IM_SEMICOLON":36,"import_stmt_repetition4":37,"import_stmt_repetition5":38,"import_stmt_repetition6":39,"import_stmt_group1":40,"import_stmt_repetition7":41,"import_stmt_repetition8":42,"import_stmt_repetition9":43,"VARI_SPACE":44,"VARI_START":45,"VARI_NAME":46,"variable_stmt_repetition0":47,"VARI_COLON":48,"VARI_VALUE":49,"variable_stmt_repetition1":50,"VARI_SEMICOLON":51,"variable_stmt_repetition2":52,"variable_stmt_repetition3":53,"variable_stmt_repetition4":54,"variable_stmt_repetition5":55,"CH_STRING":56,"CH_LETTER":57,"SPACE":58,"IM_OPT":59,"IM_STRING":60,"IM_URL":61,"IM_MEDIA":62,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",11:"SC",12:"S_SPACE",13:"MC",14:"MC_END",15:"M_SPACE",16:"CH_START",17:"CHARSET",21:"CH_SEMICOLON",23:"CH_SPACE",28:"IM_SPACE",29:"IM_START",30:"IMPORT",36:"IM_SEMICOLON",44:"VARI_SPACE",45:"VARI_START",46:"VARI_NAME",48:"VARI_COLON",49:"VARI_VALUE",51:"VARI_SEMICOLON",56:"CH_STRING",57:"CH_LETTER",58:"SPACE",59:"IM_OPT",60:"IM_STRING",61:"IM_URL",62:"IM_MEDIA"},
productions_: [0,[3,1],[3,2],[5,1],[5,2],[5,1],[5,2],[5,1],[5,2],[5,1],[5,2],[5,1],[5,2],[7,1],[7,2],[6,2],[6,3],[8,7],[8,8],[9,10],[9,9],[10,9],[10,8],[18,0],[18,2],[19,1],[19,1],[20,0],[20,2],[22,0],[22,2],[24,0],[24,2],[25,1],[25,1],[26,0],[26,2],[27,0],[27,2],[31,0],[31,2],[32,0],[32,2],[33,1],[33,1],[34,0],[34,2],[35,0],[35,2],[37,0],[37,2],[38,0],[38,2],[39,0],[39,2],[40,1],[40,1],[41,0],[41,2],[42,0],[42,2],[43,0],[43,2],[47,0],[47,2],[50,0],[50,2],[52,0],[52,2],[53,0],[53,2],[54,0],[54,2],[55,0],[55,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 2:

        return {
            root: ast
        };
    
break;
case 13:

        ast.sComments.push({
            type: 'sComment',
            originContent: $$[$0],
            value: $$[$0],
            before: '',
            after: '',
            loc: {
                firstLine: _$[$0].first_line,
                lastLine: _$[$0].last_line,
                firstCol: _$[$0].first_column + 1,
                lastCol: _$[$0].last_column + 1
            }
        });
    
break;
case 14:

        ast.sComments.push({
            type: 'sComment',
            originContent: $$[$0],
            value: $$[$0],
            before: $$[$0-1],
            after: '',
            loc: {
                firstLine: _$[$0].first_line,
                lastLine: _$[$0].last_line,
                firstCol: _$[$0].first_column + 1,
                lastCol: _$[$0].last_column + 1
            }
        });
    
break;
case 15:

        // yy.test();
        ast.mComments.push({
            type: 'mComment',
            value: $$[$0-1] + $$[$0],
            before: '',
            after: '',
            loc: {
                firstLine: _$[$0-1].first_line,
                lastLine: _$[$0].last_line,
                firstCol: _$[$0-1].first_column + 1,
                lastCol: _$[$0].last_column + 1,
                originContent: $$[$0-1] + $$[$0]
            }
        });
    
break;
case 16:

        ast.mComments.push({
            type: 'mComment',
            value: $$[$0-1] + $$[$0],
            before: $$[$0-2],
            after: '',
            loc: {
                firstLine: _$[$0-1].first_line,
                lastLine: _$[$0].last_line,
                firstCol: _$[$0-1].first_column + 1,
                lastCol: _$[$0].last_column + 1,
                originContent: $$[$0-1] + $$[$0]
            }
        });
    
break;
case 17:

        var quote = '';
        var match;
        if (match = $$[$0-3].match(/^(['"]).*\1/)) {
            quote = match[1];
        }
        ast.charsets.push({
            type: 'charset',
            originContent: $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0],
            value: $$[$0-4].join('') + $$[$0-3] + $$[$0-2].join(''),
            quote: quote,
            before: '',
            after: '',
            loc: {
                firstLine: _$[$0-6].first_line,
                lastLine: _$[$0-1].last_line,
                firstCol: _$[$0-6].first_column + 1,
                lastCol: _$[$0-1].last_column + 1
            }
        });
    
break;
case 18:

        var quote = '';
        var match;
        if (match = $$[$0-3].match(/^(['"]).*\1/)) {
            quote = match[1];
        }
        ast.charsets.push({
            type: 'charset',
            originContent: $$[$0-7] + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0],
            value: $$[$0-4].join('') + $$[$0-3] + $$[$0-2].join(''),
            quote: quote,
            before: $$[$0-7],
            after: '',
            loc: {
                firstLine: _$[$0-6].first_line,
                lastLine: _$[$0-1].last_line,
                firstCol: _$[$0-6].first_column + 1,
                lastCol: _$[$0-1].last_column + 1
            }
        });
    
break;
case 19:

        var quote = '';
        var match;
        if (match = $$[$0-4].match(/(['"]).*\1/)) {
            quote = match[1];
        }

        var importOption = [];
        var imOptStr = $$[$0-6].join('');
        if (imOptStr) {
            var t = imOptStr.split(',');
            var s;
            for (var i = 0, len = t.length; i < len; i++) {
                s = t[i].replace(/^[\s\(]*/g, '').replace(/[\s\)]*$/, '');
                if (s) {
                    importOption.push(s);
                }
            }
        }

        ast.imports.push({
            type: 'import',
            originContent: $$[$0-9] + $$[$0-8] + $$[$0-7] + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0],
            value: $$[$0-5].join('') + $$[$0-4] + $$[$0-3].join(''),
            quote: quote,
            importOption: importOption,
            originImportOption: imOptStr,
            mediaValue: $$[$0-2].join(''),
            before: $$[$0-9],
            after: $$[$0].join(''),
            loc: {
                firstLine: _$[$0-8].first_line,
                lastLine: _$[$0-1].last_line,
                firstCol: _$[$0-8].first_column + 1,
                lastCol: _$[$0-1].last_column + 1
            }
        });
    
break;
case 20:

        var quote = '';
        var match;
        if (match = $$[$0-4].match(/(['"]).*\1/)) {
            quote = match[1];
        }

        var importOption = [];
        var imOptStr = $$[$0-6].join('');
        if (imOptStr) {
            var t = imOptStr.split(',');
            var s;
            for (var i = 0, len = t.length; i < len; i++) {
                s = t[i].replace(/^[\s\(]*/g, '').replace(/[\s\)]*$/, '');
                if (s) {
                    importOption.push(s);
                }
            }
        }

        ast.imports.push({
            type: 'import',
            originContent: $$[$0-8] + $$[$0-7] + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0],
            value: $$[$0-5].join('') + $$[$0-4] + $$[$0-3].join(''),
            quote: quote,
            importOption: importOption,
            originImportOption: imOptStr,
            mediaValue: $$[$0-2].join(''),
            before: '',
            after: $$[$0].join(''),
            loc: {
                firstLine: _$[$0-8].first_line,
                lastLine: _$[$0-1].last_line,
                firstCol: _$[$0-8].first_column + 1,
                lastCol: _$[$0-1].last_column + 1
            }
        });
    
break;
case 21:

        var valueBefore = '';
        var match = /^(\s+)/.exec($$[$0-3]);
        if (match) {
            valueBefore = match[0];
        }

        var pureValue = $$[$0-3].replace(/^(\s+)/, '');

        ast.variables.push({
            type: 'variable',
            originContent: $$[$0-8] + $$[$0-7] + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0],
            variableName: $$[$0-6],
            variableNameBefore: $$[$0-8],
            variablenameAfter: $$[$0-5].join(''),
            variableValue: pureValue,
            variableValueBefore: valueBefore,
            variableValueAfter: $$[$0-2].join(''),
            value: pureValue,
            before: $$[$0-8],
            after: $$[$0].join(''),
            loc: {
                firstLine: _$[$0-7].first_line,
                lastLine: _$[$0-1].last_line,
                firstCol: _$[$0-7].first_column + 1,
                lastCol: _$[$0-1].last_column + 1
            }
        });
    
break;
case 22:

        var valueBefore = '';
        var match = /^(\s+)/.exec($$[$0-3]);
        if (match) {
            valueBefore = match[0];
        }

        var pureValue = $$[$0-3].replace(/^(\s+)/, '');

        ast.variables.push({
            type: 'variable',
            originContent: $$[$0-7] + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0],
            variableName: $$[$0-6],
            variableNameBefore: '',
            variablenameAfter: $$[$0-5].join(''),
            variableValue: pureValue,
            variableValueBefore: valueBefore,
            variableValueAfter: $$[$0-2].join(''),
            value: pureValue,
            before: '',
            after: $$[$0].join(''),
            loc: {
                firstLine: _$[$0-7].first_line,
                lastLine: _$[$0-1].last_line,
                firstCol: _$[$0-7].first_column + 1,
                lastCol: _$[$0-1].last_column + 1
            }
        });
    
break;
case 23: case 27: case 29: case 31: case 35: case 37: case 39: case 41: case 45: case 47: case 49: case 51: case 53: case 57: case 59: case 61: case 63: case 65: case 67: case 69: case 71: case 73:
this.$ = [];
break;
case 24: case 28: case 30: case 32: case 36: case 38: case 40: case 42: case 46: case 48: case 50: case 52: case 54: case 58: case 60: case 62: case 64: case 66: case 68: case 70: case 72: case 74:
$$[$0-1].push($$[$0]);
break;
}
},
table: [{3:1,4:[1,2],5:3,6:4,7:5,8:6,9:7,10:8,11:$V0,12:$V1,13:$V2,15:$V3,16:$V4,23:$V5,28:$V6,29:$V7,44:$V8,45:$V9},{1:[3]},{1:[2,1]},{4:[1,19],6:20,7:21,8:22,9:23,10:24,11:$V0,12:$V1,13:$V2,15:$V3,16:$V4,23:$V5,28:$V6,29:$V7,44:$V8,45:$V9},o($Va,[2,3]),o($Va,[2,5]),o($Va,[2,7]),o($Va,[2,9]),o($Va,[2,11]),{14:[1,25]},{13:[1,26]},o($Va,[2,13]),{11:[1,27]},{17:[1,28]},{16:[1,29]},{29:[1,30]},{30:[1,31]},{45:[1,32]},{46:[1,33]},{1:[2,2]},o($Va,[2,4]),o($Va,[2,6]),o($Va,[2,8]),o($Va,[2,10]),o($Va,[2,12]),o($Va,[2,15]),{14:[1,34]},o($Va,[2,14]),o($Vb,[2,23],{18:35}),{17:[1,36]},{30:[1,37]},o($Vc,[2,51],{38:38}),{46:[1,39]},o($Vd,[2,69],{53:40}),o($Va,[2,16]),{19:41,23:[1,42],56:[1,43],57:[1,44]},o($Vb,[2,31],{24:45}),o($Vc,[2,39],{31:46}),o($Ve,[2,53],{39:47,59:[1,48]}),o($Vd,[2,63],{47:49}),{44:[1,51],48:[1,50]},o($Vf,[2,27],{20:52}),o($Vb,[2,24]),o($Vf,[2,25]),o($Vf,[2,26]),{23:[1,54],25:53,56:[1,55],57:[1,56]},o($Ve,[2,41],{32:57,59:[1,58]}),{28:[1,60],40:59,60:[1,61],61:[1,62]},o($Vc,[2,52]),{44:[1,64],48:[1,63]},{49:[1,65]},o($Vd,[2,70]),{21:[1,66],23:[1,67]},o($Vf,[2,35],{26:68}),o($Vb,[2,32]),o($Vf,[2,33]),o($Vf,[2,34]),{28:[1,70],33:69,60:[1,71],61:[1,72]},o($Vc,[2,40]),o($Vg,[2,57],{41:73}),o($Ve,[2,54]),o($Vg,[2,55]),o($Vg,[2,56]),{49:[1,74]},o($Vd,[2,64]),o($Vh,[2,71],{54:75}),o($Vi,[2,29],{22:76}),o($Vf,[2,28]),{21:[1,77],23:[1,78]},o($Vg,[2,45],{34:79}),o($Ve,[2,42]),o($Vg,[2,43]),o($Vg,[2,44]),o($Vj,[2,59],{42:80,28:[1,81]}),o($Vh,[2,65],{50:82}),{44:[1,84],51:[1,83]},o($Va,[2,17],{58:[1,85]}),o($Vi,[2,37],{27:86}),o($Vf,[2,36]),o($Vj,[2,47],{35:87,28:[1,88]}),{36:[1,89],62:[1,90]},o($Vg,[2,58]),{44:[1,92],51:[1,91]},o($Vi,[2,73],{55:93}),o($Vh,[2,72]),o($Vi,[2,30]),o($Va,[2,18],{58:[1,94]}),{36:[1,95],62:[1,96]},o($Vg,[2,46]),o($Vi,[2,61],{43:97}),o($Vj,[2,60]),o($Vi,[2,67],{52:98}),o($Vh,[2,66]),o($Va,[2,22],{58:[1,99]}),o($Vi,[2,38]),o($Vi,[2,49],{37:100}),o($Vj,[2,48]),o($Va,[2,20],{58:[1,101]}),o($Va,[2,21],{58:[1,102]}),o($Vi,[2,74]),o($Va,[2,19],{58:[1,103]}),o($Vi,[2,62]),o($Vi,[2,68]),o($Vi,[2,50])],
defaultActions: {2:[2,1],19:[2,2]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    // var chalk = require('chalk');

    // var isDebug = true;
    // function debug() {
    //     if (isDebug) {
    //         var args = [].slice.call(arguments);
    //         var len = args.length;
    //         if (len === 1) {
    //             console.warn(args[0]);
    //         }
    //         else {
    //             var msg = [];
    //             while (len) {
    //                 msg.push(args[args.length - len--]);
    //             }

    //             var first = msg.splice(0, 1);
    //             console.warn(chalk.yellow(first) + ': ' + chalk.cyan(msg.join(' ')));
    //             console.warn();
    //         }
    //     }
    // }

    var util = require('util');
    var debug = require('debug')('jison-lesslint: grammar');

    var ast = {
        variables: [],
        imports: [],
        selectors: [],
        charsets: [],
        sComments: [],
        mComments: []
    };

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
    var debug = require('debug')('jison-lesslint: lexer');
    var s, s2, s3;
    var rv, rv2, e_offset, col, row, len, value;
    var match, match2;

    // console.log("lexer action: ", yy, yy_, this, yy_.yytext, YY_START, $avoiding_name_collisions);
    // var parser = yy.parser;
    debug(YY_START);

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
    yy_.yytext = yy_.yytext.replace(/^\n+/g, '');
    return 12;

break;
case 1:
    if (this.topState() !== 'sc') {
        this.begin('sc');
    }
    return 11;

break;
case 2:
    this.popState();

break;
case 3:
    yy_.yytext = yy_.yytext.replace(/^\n+/g, '');
    return 15;

break;
case 4:
    if (this.topState() !== 'mc') {
        this.begin('mc');
    }
    return 13;

break;
case 5:
    this.popState();
    return 14;

break;
case 6:
    this.popState();

break;
case 7:
    yy_.yytext = yy_.yytext.replace(/^\n+/g, '');
    return 44;

break;
case 8:
    this.begin('vari_start');
    return 45;

break;
case 9:
    this.popState();
    this.begin('vari');
    return 46;

break;
case 10:
    this.begin('vari_colon_start');
    return 48;

break;
case 11:
    this.popState();
    return 49;

break;
case 12:
    return 44;

break;
case 13:
    this.popState();
    return 51;

break;
case 14:
    yy_.yytext = yy_.yytext.replace(/^\n+/g, '');
    return 23;

break;
case 15:
    this.begin('ch_start');
    return 16;

break;
case 16:
    this.popState();
    this.begin('ch');
    return 17;

break;
case 17:
    return 23;

break;
case 18:
    return 56;

break;
case 19:
    return 57;

break;
case 20:
    this.popState();
    return 21;

break;
case 21:
    yy_.yytext = yy_.yytext.replace(/^\n+/g, '');
    return 28;

break;
case 22:
    this.begin('im_start');
    return 29;

break;
case 23:
    this.popState();
    this.begin('im');
    return 30;

break;
case 24:
    return 59;

break;
case 25:
    return 28;

break;
case 26:
    return 60;

break;
case 27:
    return 61;

break;
case 28:
    return 62;

break;
case 29:
    this.popState();
    return 36;

break;
case 30:
    return 58;

break;
case 31:
    return 'N';

break;
case 32:
    this.begin('s');

break;
case 33:
    this.popState();
    return 4;

break;
}
},
rules: [/^(?:([ \t\s]+)(?=(\/\/[^\n]*)))/,/^(?:(\/\/[^\n]*))/,/^(?:(\n+))/,/^(?:([ \t\s]+)(?=(\/\*(?:[^*]|\*+[^\/*])*\n?)))/,/^(?:(\/\*(?:[^*]|\*+[^\/*])*\n?))/,/^(?:\*+\/[\s\n]?)/,/^(?:(\n+))/,/^(?:([ \t\s]+)(?=(@([\w-]+)\s*:+)))/,/^(?:@(?=(([\w-]+)\s*:+)))/,/^(?:([\w-]+))/,/^(?::+)/,/^(?:\s*(%|@?[_A-Za-z0-9-]|(("([^\n\r\f\\"])*")|('([^\n\r\f\\'])*'))|(#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3}))|[\(\)\+\-\*\/\s]*|,\s*)*)/,/^(?:([ \t\s]+))/,/^(?:(;+))/,/^(?:([ \t\s]+)(?=@charset))/,/^(?:@(?=charset))/,/^(?:charset\b)/,/^(?:([ \t\s]+))/,/^(?:(("([^\n\r\f\\"])*")|('([^\n\r\f\\'])*')))/,/^(?:([\w-]+))/,/^(?:(;+))/,/^(?:([ \t\s]+)(?=@import))/,/^(?:@(?=import))/,/^(?:import\b)/,/^(?:([ \t\s]+)\((\s*(|less|css|multiple|once|inline|reference)\s*(,\s*(|less|css|multiple|once|inline|reference)*\s*)*)\))/,/^(?:([ \t\s]+))/,/^(?:(("([^\n\r\f\\"])*")|('([^\n\r\f\\'])*')))/,/^(?:url\([^\)]+\))/,/^(?:[\w-\s\:\(\)]+)/,/^(?:(;+))/,/^(?:([ \t\s]+))/,/^(?:(\n+))/,/^(?:)/,/^(?:$)/],
conditions: {"s":{"rules":[0,1,3,4,7,8,14,15,21,22,30,31,33],"inclusive":false},"sc":{"rules":[1,2,33],"inclusive":false},"mc":{"rules":[4,5,6,33],"inclusive":false},"ch_start":{"rules":[16],"inclusive":false},"ch":{"rules":[17,18,19,20],"inclusive":false},"im_start":{"rules":[23],"inclusive":false},"im":{"rules":[24,25,26,27,28,29],"inclusive":false},"vari_start":{"rules":[9],"inclusive":false},"vari":{"rules":[10,12,13],"inclusive":false},"vari_colon_start":{"rules":[11],"inclusive":false},"INITIAL":{"rules":[32,33],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}